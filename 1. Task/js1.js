https://codyfet.github.io/type-conversions/

'' + 1 + 0
'10'
Верно!
скрытьСтроковое преобразование. Здесь происходит неявное преобразование, применяется оператор '+', у которого один из аргументов строка. В этом случае он приводит к строке и другой аргумент.

String (null)
'null'
Верно!
скрытьСтроковое преобразование. Здесь происходит явное преобразование к строке.
true + 'test'

'truetest'
Верно!
скрытьСтроковое преобразование. Здесь происходит неявное преобразование, применяется оператор '+', у которого один из аргументов строка. В этом случае он приводит к строке и другой аргумент.

undefined + '123'
'undefined123'
Верно!
Строковое преобразование. Здесь происходит неявное преобразование, применяется оператор '+', у которого один из аргументов строка. В этом случае он приводит к строке и другой аргумент.
String (123)

'123'
Верно!
скрытьСтроковое преобразование. Здесь происходит явное преобразование к строке.

String (-12.3)
'-12.3'
Верно!
Строковое преобразование. Здесь происходит явное преобразование к строке.

String (undefined)
'undefined'
Верно!
Строковое преобразование. Здесь происходит явное преобразование к строке.

String (true)
'true'
Верно!
Строковое преобразование. Здесь происходит явное преобразование к строке.

String (false)
'false'
Верно!
Строковое преобразование. Здесь происходит явное преобразование к строке.

4 + 5 + 'px'
'9px'
Верно!
Строковое преобразование. Здесь сначала складываются числа, затем происходит строковое преобразование.

'$' + 4 + 5
'$45'
Верно!
Строковое преобразование. Здесь происходит неявное преобразование к строке, так как один из аргументов оператора '+' является строкой.

15 + 3 + 'number'
'18number'
Верно!
Строковое преобразование. Здесь сначала складываются числа, затем происходит строковое преобразование.

5 && 2
5&&2
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование. Логические операторы такие как || и && производят булевое преобразование под капотом, но при этом всегда возвращают оригинальное значение операндов, даже если они не являются булевыми.

2 && 5
2&&5
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование. Логические операторы такие как || и && производят булевое преобразование под капотом, но при этом всегда возвращают оригинальное значение операндов, даже если они не являются булевыми.

5 || 0
5||0
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование. Логические операторы такие как || и && производят булевое преобразование под капотом, но при этом всегда возвращают оригинальное значение операндов, даже если они не являются булевыми.

0 || 5
0||5
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование. Логические операторы такие как || и && производят булевое преобразование под капотом, но при этом всегда возвращают оригинальное значение операндов, даже если они не являются булевыми.

'null' == ''
false
Верно!
Логическое преобразование. Оператор нестрогого равенства == (включая !=) не вызывает численное преобразование, если оба операнда являются строками. Здесь сравниваются строки.

!!'false' == !!'true'
true
Верно!
Логическое преобразование. Оператор !! конвертирует строки true и false в булевое значение true, так как это не пустые строки. А дальше оператор == просто сравнивает два булевых значения безо всяких преобразований.

Boolean (2)
true
Верно!
Логическое преобразование. Здесь происходит явное логическое преобразование.

!!2
true
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование. Оператор !! конвертирует чтсло 2 в true.

2 || 'hello'
2||'hello'
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование. Логические операторы такие как || и && производят булевое преобразование под капотом, но при этом всегда возвращают оригинальное значение операндов, даже если они не являются булевыми.

Boolean ('')
false
Верно!
Логическое преобразование. Здесь происходит явное логическое преобразование.

Boolean (0)
false
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование.

Boolean (-0)
false
Верно!
Логическое. Здесь происходит неявное логическое преобразование.

Boolean (NaN)
false
Верно!
Логическое преобразование. Здесь происходит явное логическое преобразование.

Boolean (null)
false
Верно!
Логическое преобразование. Здесь происходит явное логическое преобразование.

Boolean (undefined)
false
Верно!
Логическое преобразование. Здесь происходит явное логическое преобразование.

Boolean (false)
false
Верно!
Логическое преобразование. Здесь происходит явное логическое преобразование.
Boolean ({})

true
Верно!
скрытьЛогическое преобразование. Здесь происходит явное логическое преобразование.
Boolean ([])

true
Верно!
скрытьЛогическое преобразование. Здесь происходит неявное логическое преобразование.

Boolean (function() {})
true
Верно!
Логическое преобразование. Здесь происходит неявное логическое преобразование.

!!'0'
true
Верно!
Логическое преобразование. В отличие от многих языков программирования, '0' в JavaScript является true

!!' '
true
Верно!
Логическое преобразование. Любые непустые строки, даже из пробелов преобразовываются к true!

'false' == false
false
Верно!
Численное преобразование. Оператор сравнения == вызывает численное преобразование, поэтому строка 'false' конвертируется в NaN, а правый операнд false станет 1.

'2' / 2
1
Верно!
Численное преобразование. Оператор деления вызывает численное преобразование строки (первого операнда).

7 / 0
Infinity
Верно!
Численное преобразование. Infinity специальное значение типа number. Ведёт себя как математическая бесконечность. Любое положительное число, умноженное на Infinity даёт Infinity, а любое число, делённое на Infinity даёт 0.

'' - 1 + 0
-1
Верно!
Численное преобразование. Оператор '-' вызывает численное преобразование строки (первого операнда). ' ' преобразовывается к 0.

true + false
1
Верно!
Численное преобразование. Оператор '+' вызывает численное преобразование обоих операндов.

6 / '3'
2
Верно!
Численное преобразование. Оператор '/' вызывает численное преобразование второго операнда.

'2' * 3
6
Верно!
Численное преобразование. Оператор '*' вызывает численное преобразование первого операнда.

'4' - 2
2
Верно!
Численное преобразование. Оператор '-' вызывает численное преобразование первого операнда.

'4px' - 2
NaN
Верно!
Численное преобразование. '4px' невозможно преобразовать к числу, поэтому возвращается значение NaN.

'true' == true
false
Верно!
Численное преобразование. Оператор сравнения == вызывает численное преобразование, поэтому строка 'true' конвертируется в NaN, а правый операнд true станет 1.

+'123'
123
Верно!
Численное преобразование. Строка '123' будет преобразована к числу 123.

123 != '456'
true
Верно!
Численное преобразование. Строка '456' будет преобразована к числу 456.

4 > '5'
false
Верно!
Численное преобразование. Строка '5' будет преобразована к числу 5.

'1' == true
true
Верно!
Численное преобразование. Обе части будут преобразованы к числу (1 и 1, соответственно).

5 / null
Infinity
Верно!
Численное преобразование. null в результате численного преобразования будет преобразовано к 0. При делении числа на 0 получаем специальное значение типа number - Infinity.

true | 0
1
Верно!
Численное преобразование. Первый операнд будет неявно преобразован к числу 1.

undefined + 1
NaN
Верно!
Численное преобразование. Значение типа данных undefined в результате численного преобразования становится NaN (в отличие от null, которое преобразовывается к 0).

Number ('123')
123
Верно!
Численное преобразование. Явное преобразование к типу number.

Number (null)
0
Верно!
Численное преобразование. Явное преобразование к типу number. null преобразовыается к 0.

Number (undefined)
NaN
Верно!
Численное преобразование. Явное преобразование к типу number. Результат - NaN.

Number (true)
1
Верно!
Численное преобразование. Явное преобразование к типу number.

Number (false)
0
Верно!
Численное преобразование. Явное преобразование к типу number.

Number (' 12 ')
12
Верно!
Численное преобразование. Явное преобразование к типу number.

Number ('-12.34')
-12.34
Верно!
Численное преобразование. Явное преобразование к типу number.

Number (' ')
null
Неверно!
Численное преобразование. Явное преобразование к типу number.

Number (' 12s '')
Результатом будет являться
Неверно!
Численное преобразование. Явное преобразование к типу number.

Number (123)
123
Верно!
Численное преобразование. Явное преобразование к типу number.

+true
1
Верно!
Численное преобразование. В результате численного преобразования true становится равным 1.

null + 1
1
Верно!
Численное преобразование. null при численном преобразовании становится 0.

null == 0
false
Верно!
Численное преобразование. false, null is not converted to 0. При применении == к null или undefined, численное преобразование не происходит, так как null может равняться только null или undefined, и ничему другому.

null == null
true
Верно!
Численное преобразование. При применении == к null или undefined, численное преобразование не происходит, так как null может равняться только null или undefined, и ничему другому.

undefined == undefined
true
Верно!
Численное преобразование. При применении == к null или undefined, численное преобразование не происходит, так как null может равняться только null или undefined, и ничему другому.

null == undefined
true
Верно!
Численное преобразование. При применении == к null или undefined, численное преобразование не происходит, так как null может равняться только null или undefined, и ничему другому.

NaN == NaN
false
Верно!
Численное преобразование. NaN не равен ничему, даже самому себе.

NaN === NaN
false
Верно!
Численное преобразование. NaN не равен ничему, даже самому себе.

'foo' + + 'bar'
'fooNaN'
Верно!
Численное преобразование. Сначала 'bar' преобразовывается к числу (результатом является NaN), затем NaN преобразовывается к строке, так как одним из агументов оператора + является строка.



[1] > null

true
Верно!
скрытьЧисленное преобразование (объекты). Оператор сравнения > вызывает численное преобразование для [1] и null. Для массива вызывается метод toString() и в результате [1] превращается в примитив '1'. Далее строка уже спокойно численно преобразовывается к 1, а null к 0.
[2] > [1]

true
Верно!
скрытьЧисленное преобразование (объекты). Оператор сравнения > вызывает численное преобразование для [2] и [1]. Для массива вызывается метод toString() и в результате [2] превращается в примитив '2', а [1] превращается в примитив '1'. Далее строка уже спокойно численно преобразовывается к числу, получаем 2 > 1.
['x'] == 'x'

true
Верно!
скрытьСтроковое преобразование (объекты). Оператор == вызывает численное преобразование для массива ['x']. Метод массива valueOf() возвращает сам массив, а значит результат игнорируется, так как не является примитивом. Далее, вызывается метод массива toString(), который конвертирует ['x'] в строку 'x'. Далее, как мы помним, оператор нестрогого равенства == (включая !=) не вызывает численное преобразование, если оба операнда являются строками. Здесь сравниваются строки.
[] + null + 1

'null1'
Верно!
скрытьСтроковое преобразование (объекты). Оператор + вызывает численное преобразование массива. Метод массива valueOf() вернёт сам массив, поэтому результат игнорируется, поскольку не является примитивом. Далее вызывается toString(), который возвращает ' '.
[1,2,3] == [1,2,3]

false
Верно!
скрытьВ данном примере никакого преобразования не требуется, потому что оба операнда одного типа. Так как оператор == сравнивает объекты по ссылке, а не по значению, а данные массивы являются двумя разными экземплярами, результатом будет false.
[] == ![]

true
Верно!
скрытьЛогическое преобразование (объекты). Сначала ![] будет преобразовано к false, получаем [] == false. Далее левая часть неявно должна быть преобразована к числу, для этого для массива вызовется метод valueOf (который в случае с Array вернёт ссылку на самого себя). Далее, так как valueOf не вернул примитив будет вызван метод toString() (который для Array вернёт строковое представление элементов). toString здесь вернёт ' '. Получаем сравнение примитивов ' ' == false. Для оператора == обе стороны неявно преобразовываются к числу, получаем 0 == 0, что возвращает true.
new Date(0) - 0

0
Верно!
new Array(1)[0] + ''

undefined
Неверно!
({})[0]

undefined
Верно!
[1] + 1

'11'
Неверно!
[1,2] + [3,4]

'1,23,4'
Неверно!
new Date() - new Date()

0
Верно!
[[0]][0][0]

0
Верно!
{} + {}

{}{}
Неверно!




typeof 'John'

'string'
Верно!
typeof 3.14

'number'
Верно!
typeof NaN

'number'
Верно!
typeof false

'boolean'
Верно!
typeof [1,2,3,4]

'object'
Верно!
typeof {name: 'John', age: 34}

'object'
Верно!
typeof new Date ()

'object'
Верно!
typeof myCar

'undefined'
Верно!
typeof null

'object'
Верно!
typeof ''

'string'
Верно!
typeof Infinity

'number'
Верно!
typeof (4 + 7)

'number'
Верно!
typeof ('4' + '7')

'string'
Верно!
typeof (4 * '7')

'number'
Верно!
typeof '123' + 4

'string4'
Верно!
typeof 123 + 4

'number4'
Верно!
typeof (123 + 4)

'number'
Верно!
typeof ('123' + 4)

'string'
Верно!

