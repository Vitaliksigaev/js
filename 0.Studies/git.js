// Полезные команды GITHUB

clear // очистка окна терминала /Очистить консоль 

//-> НАВИГАЦИЯ 

pwd // Показать текущий каталог

ls // просмотр что содержит текущая папка в которой Вы находитесь на данный момент , кроме скрытых

ls -f // Показать файлы в данной папке, включая и скрытые

cd "название папки" // переходит из текущей папки в "название папки"

cd c:/ // Перейти в конкретный каталог

cd - // Вернуться назад

cd .. // Выйти на 1 уровень вверх

cd ../.. // Выйти на 2 уровня вверх 


git branch // какие ветки существуют в нашем проекте и в какой ветке мы сейчас находимся (*)

git checkout master // Перемещение из текущей ветки в векту master

git checkout -b first // создаем и переходим на новую ветку под названием first


//-> СОЗДАНИЕ КАТАЛОГОВ

mkdir // Создать папку

cd !$ // Перейти в только что созданную папку

mkdir -p {app1,app2} // Создать сразу несколько папок

mkdir -p app/{css,js} // Создать сразу несколько вложенных папок 


//-> СОЗДАНИЕ ФАЙЛОВ

touch 'название.txt' // создание файла 'название.txt' в текущем месте

touch app/{css/main.css,js/main.js,index.html} // Создать сразу несколько файлов, никаких лишних пробелов быть не должно 


//-> РЕДАКТИРОВАНИЕ И ПРОСМОТР

vim 'название.txt' // редактирование файла 'название.txt' => нажмите 'I' чтобы перейти в интерактивный режим и начать редактировать файд -> Нажимаем "Esc" -> Пишем без ковычек ->':wq' -> Нажимаем "Enter"

cat 'название.txt' // просмотр содержимого в файле 'название.txt'


//-> УДАЛЕНИЕ ФАЙЛОВ

rm test // Удалить пустую папку test

rm -r test // Удалить папку test с файлами внутри неё 

//-> ПЕРЕМЕЩЕНИЕ ФАЙЛОВ

mv app1/ *.* app2 // Переместить все файлы из папки app1 в папку app2 (без пробела между / и *)

// ОБНОВЛЕНИЕ И ОТСЛЕЖИВАНИЕ
git status // отображает состояние файлов которые изменились (красным MODIFIED изменились или КРАСНЫМ название файлв - не отслеживаются изменение / зеленым (НОВЫЙ файл/ измененный файл, который мы добавили для отслеживания)

git add . // добавление файлов для ослеживания

git commit -m "Add: ********" // Комментарий к внесенным изменениям 

git branch -M master // Изменения мы перенесли в ветки и переименновали ее в название "master"

git remote //позволяет создавать, просматривать и удалять подключения к другим репозиториям


git push // отправление изменений в удаленный репозиторий.

git push --set-upstream origin first // связываем ветку first с удаленным репозиторием

git push --force // намеренно захотите перезаписать историю коммитов на удаленном компьютере

git merge master// Слияние текущей ветки с данными которые находятся на ветку master 

git rebase master //изменить серию коммитов, изменяя историю вашего репозитория. Вы можете переупорядочивать, редактировать или объединять коммиты вместе.

git rebase --continue //

git config --local --list // какие конфиги у нас установлены локально



//https://htmlacademy.ru/blog/articles/git-console